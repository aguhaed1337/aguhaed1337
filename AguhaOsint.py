import os
import sys
import requests
import re
import random
import base64
from fake_useragent import UserAgent
from datetime import datetime
import time
import platform
import socket
from termcolor import colored
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import pandas as pd
import openpyxl
import glob
import subprocess
from faker import Faker
import os
import sys
import requests
import re
import random
import base64
from fake_useragent import UserAgent
from datetime import datetime
import time
import platform
import socket
from termcolor import colored
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import pandas as pd
import openpyxl
import glob
import subprocess
from faker import Faker

DB_PATH = "/storage/emulated/0/Download/Telegram/AguhaOsintFREE/

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PHONE_API_KEY = "a65bda8d58814332915390c6572e1ec9"
EMAIL_API_KEY = "1897d39d83224f9a92f491d6efaa4e6f"
WATERMARK = "@aguhaed1337"
BOT_TOKEN = "7490735094:AAEbpISOsfqO7ODT3vx-JwwSzqSom5EDuqc"
fake = Faker()
yukino = 0

SMTP_ACCOUNTS = [
    {"server": "smtp.gmail.com", "port": 587, "login": "masterali43@gmail.com", "password": "erenutku2010"},
    {"server": "smtp.office365.com", "port": 587, "login": "maveranur96@hotmail.com", "password": "5278205"},


    {"server": "smtp.office365.com", "port": 587, "login": "mava_mavi@hotmail.com", "password": "262626"},{"server": "smtp.office365.com", "port": 587, "login": "mavi-sular-76@hotmail.com", "password": "seval981"},
    {"server": "smtp.office365.com", "port": 587, "login": "mavi_mhk@hotmail.com", "password": "4505096"}
]

SMTP_TO = ["abuse@telegram.org", "dcma@telegram.org"]

def clear_screen():
    os.system('clear' if os.name == 'posix' else 'cls')

def show_banner():
    print("\033[1;35m" + r"""
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    """ + "\033[0m")
    print("\033[1;35m          AGUHA OSINT TOOL v4.0\033[0m")
    print("\033[1;35m          " + WATERMARK + "\033[0m\n")

def send_via_bot(chat_id, text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    params = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=params)
        return response.json().get("ok", False)
    except Exception as e:
        print(f"\033[1;31m[√ó] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {str(e)}\033[0m")
        return False

def search_in_databases(query, search_type='phone'):
    db_path = "/storage/emulated/0/Download/Telegram/AguhaOsintFREE/"
    if not os.path.exists(db_path):
        os.makedirs(db_path)
        print(colored(f"[!] –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –±–∞–∑: {db_path}", "yellow"))
    
    results = []
    for file in glob.glob(f"{db_path}*.*"):
        try:
            if file.endswith('.txt'):
                with open(file, 'r', encoding='utf-8', errors='ignore') as f:
                    results.extend(line.strip() for line in f if query.lower() in line.lower())
            elif file.endswith('.csv'):
                df = pd.read_csv(file)
                matches = df[df.apply(lambda row: row.astype(str).str.contains(query, case=False).any(), axis=1)]
                results.extend(matches.to_dict('records'))
            elif file.endswith(('.xlsx', '.xls')):
                df = pd.read_excel(file)
                matches = df[df.apply(lambda row: row.astype(str).str.contains(query, case=False).any(), axis=1)]
                results.extend(matches.to_dict('records'))
        except Exception as e:
            print(colored(f"[!] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file}: {str(e)}", "red"))
    return results

def check_phone(phone):
    clear_screen()
    print(colored(f"\n[üîç] –ê–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–∞: {phone}", "cyan"))
    
    try:
        resp = requests.get("https://phonevalidation.abstractapi.com/v1/",
                          params={'api_key': PHONE_API_KEY, 'phone': phone},
                          timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            print(colored("\n[‚úì] –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", "green"))
            print(f"‚Ä¢ –§–æ—Ä–º–∞—Ç: {data.get('format', {}).get('international', 'N/A')}")
            print(f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {data.get('country', {}).get('name', 'N/A')}")
            print(f"‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: {data.get('carrier', 'N/A')}")
    except Exception as e:
        print(colored(f"[!] –û—à–∏–±–∫–∞ API: {str(e)}", "red"))
    
   —à print(colored("\n[‚úì] –õ–æ–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã:", "green"))
    db_results = search_in_databases(phone)
    if db_results:
        for i, result in enumerate(db_results[:5], 1):
            if isinstance(result, dict):
                print(f"\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç #{i}:")
                for k, v in result.items():
                    if str(v).strip() and str(v) != 'nan':
                        print(f"  {k}: {v}")
            else:
                print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {result}")
    else:
        print("‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print(colored("\n[‚úì] –°–æ—Ü—Å–µ—Ç–∏:", "green"))
    print(f"‚Ä¢ Telegram: https://t.me/+{phone}")
    print(f"‚Ä¢ WhatsApp: https://wa.me/{phone}")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...")

def check_email(email):
    clear_screen()
    print(colored(f"\n[üîç] –ê–Ω–∞–ª–∏–∑ email: {email}", "cyan"))
    
    try:
        resp = requests.get("https://emailvalidation.abstractapi.com/v1/",
                          params={'api_key': EMAIL_API_KEY, 'email': email},
                          timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            print(colored("\n[‚úì] –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", "green"))
            print(f"‚Ä¢ –î–æ–º–µ–Ω: {data.get('domain', 'N/A')}")
            print(f"‚Ä¢ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'–î–∞' if data.get('is_valid_format', {}).get('value') else '–ù–µ—Ç'}")
    except Exception as e:
        print(colored(f"[!] –û—à–∏–±–∫–∞ API: {str(e)}", "red"))
    
    print(colored("\n[‚úì] –õ–æ–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã:", "green"))
    db_results = search_in_databases(email, 'email')
    if db_results:
        for i, result in enumerate(db_results[:3], 1):
            if isinstance(result, dict):
                print(f"\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç #{i}:")
                for k, v in result.items():
                    if str(v).strip() and str(v) != 'nan':
                        print(f"  {k}: {v}")
            else:
                print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {result}")
    else:
        print("‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...")

def generate_person():
    clear_screen()
    print(colored("\n[üÜî] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏", "cyan"))
    gender = random.choice(['–ú', '–ñ'])
    first_name = fake.first_name_male() if gender == '–ú' else fake.first_name_female()
    last_name = fake.last_name_male() if gender == '–ú' else fake.last_name_female()
    
    print(colored("\n[‚úì] –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", "green"))
    print(f"‚Ä¢ –§–ò–û: {last_name} {first_name}")
    print(f"‚Ä¢ –ü–æ–ª: {gender}")
    print(f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {fake.date_of_birth().strftime('%d.%m.%Y')}")
    
    print(colored("\n[‚úì] –ö–æ–Ω—Ç–∞–∫—Ç—ã:", "green"))
    print(f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7{random.randint(900, 999)}{random.randint(1000000, 9999999)}")
    print(f"‚Ä¢ Email: {fake.email()}")
    
    print(colored("\n[‚úì] –î–æ–∫—É–º–µ–Ω—Ç—ã:", "green"))
    print(f"‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç: {random.randint(10, 99)}{random.choice(['–ê–ë', '–í–ì', '–î–ï'])} {random.randint(100000, 999999)}")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...")

def spam_osk():
    clear_screen()
    print(colored("[‚ö†] –í–∫–ª—é—á–∏ VPN –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!", "red"))
    
    target_username = input("–í–≤–µ–¥–∏—Ç–µ username –∂–µ—Ä—Ç–≤—ã (@username): ").strip().replace('@', '')
    chat_id = target_username
    
    spam_messages = [
        "–ê–•–ê–•–ê–•–ê–•–ê –î–ê –¢–´ –õ–û–•",
        "–°–û–°–ò –•–£–ô –ù–ê–°–û–°–ê–¢–¨",
        "–¢–í–û–Ø –ú–ê–ú–ö–ê –í–ß–ï–†–ê –ù–ê –ë–õ–Ø–î–Ø–• –ó–ê–†–ê–ë–ê–¢–´–í–ê–õ–ê",
        "–ò–î–ò –ù–ê–•–£–ô –°–û –°–í–û–ò–ú –ú–ù–ï–ù–ò–ï–ú",
        "–ß–ï –¢–ê–ö –¢–ò–•–û, –¢–´ –†–û–¢ –•–£–ï–ú –ó–ê–ë–ò–¢?",
        "–ü–ò–ó–î–ò–®–¨ –ö–ê–ö –î–´–†–Ø–í–´–ô –¢–ê–ì–û–ù",
        "–¢–´ –í –ñ–ò–ó–ù–ò –ù–ò–ß–ï–ì–û –ù–ï –î–û–ë–¨–Å–®–¨–°–Ø",
        "–¢–í–û–ô –ü–ê–ü–ê–®–ê –ú–ï–ù–Ø –ú–û–õ–ò–õ –ß–¢–û–ë–´ –Ø –ï–ì–û –ù–ï –ï–ë–ê–õ",
        "–ó–ê–ö–†–û–ô –†–û–¢ –ü–†–ï–ñ–î–ï –ß–ï–ú –Ø –ï–ì–û –ó–ê–ö–†–û–Æ",
        "–¢–´ –î–ê–ñ–ï –°–í–û–Æ –°–û–ë–ê–ö–£ –ù–ï–ë–ê–®–ò–®–¨ –ù–û–†–ú–ê–õ–¨–ù–û",
        "–ß–ï –¢–´ –ö–ê–ö –î–ù–û –£–ù–ò–¢–ê–ó–ê –í–û–ù–Ø–ï–®–¨",
        "–ò–î–ò–ò–ò –ù–ê–ê–ê–•–£–£–£–ô",
        "–¢–´ –î–ê–ñ–ï –í –ü–ê–ë–õ–ò–ö –ß–ú–û–®–ù–ò–ö–û–í –ù–ï –ü–†–û–ô–î–Å–®–¨",
        "–¢–í–û–Ø –†–ï–ü–£–¢–ê–¶–ò–Ø –ö–ê–ö –¢–í–û–ô –ß–õ–ï–ù ‚Äî –ù–ò–ñ–ï –ü–õ–ò–ù–¢–£–°–ê"
    ]

    print(colored("\n[‚ö°] –ù–∞—á–∏–Ω–∞—é —Å–ø–∞–º... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)", "yellow"))
    
    try:
        while True:
            for message in spam_messages:
                if send_via_bot(chat_id, message):
                    print(colored(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}", "yellow"))
                else:
                    print(colored("[√ó] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏!", "red"))
                time.sleep(1)
    except KeyboardInterrupt:
        print(colored("\n[!] –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "yellow"))
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è...")

def send_web_complaint(text, proxy, target_username, target_id, phone):
    global yukino
    headers = {
        'User-Agent': UserAgent().random,
        'Content-Type': 'application/x-www-form-urlencoded',
        'Origin': 'https://telegram.org',
        'Referer': 'https://telegram.org/support'
    }
    
    form_data = {
        'message': text,
        'email': f"no-reply{random.randint(100,999)}@example.com",
        'phone': phone,
        'user_id': target_id,
        'setln': 'en'
    }
    
    try:
        response = requests.post(
            'https://telegram.org/support',
            data=form_data,
            headers=headers,
            proxies={'http': proxy, 'https': proxy},
            timeout=15
        )
        
        yukino += 1
        if "Thank you" in response.text:
            print(colored(f"[‚úì] –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–í—Å–µ–≥–æ: {yukino})", "green"))
        else:
            print(colored("[!] –í–æ–∑–º–æ–∂–Ω–æ –∫–∞–ø—á–∞", "yellow"))
    except Exception as e:
        print(colored(f"[!] –û—à–∏–±–∫–∞: {str(e)}", "reear_screen()
    print(colored("[‚ö†] –í–∫–ª—é—á–∏ VPN –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!", "red"))
    
    target_username = input("–í–≤–µ–¥–∏—Ç–µ @username (–±–µ–∑ @): ").strip()
    target_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (+7...): ").strip()
    chat_link = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç: ").strip() or "N/A"
   
